using System;

namespace ConsoleAppPathfinding
{
    class Program
    {

        static int[,] r = {
            { -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, },
            { -2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -1, -2, -2, -2, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -2, -2, -2, -2, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -2, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -2, -1, -1, -1, -2, },
            { -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -2, -1, -1, -3, -2, },
            { -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, }
        };
        static int counter = 0;
        static int maxCounts = r.GetLength(0) * r.GetLength(1);
        static int x1, y1, x2, y2;
        static void Initialize()
        {
            while (true)
            {
                for (int x = 0; x < r.GetLength(0); x++)
                {
                    for (int y = 0; y < r.GetLength(1); y++)
                    {
                        if (r[x, y] == counter)
                        {
                            if (r[x + 1, y] == -1)
                            {
                                r[x + 1, y] = counter + 1;
                            }
                            else if (r[x + 1, y] == -3)
                            {
                                x1 = x + 1;
                                y1 = y;
                                Build();
                                return;
                            }
                            if (r[x - 1, y] == -1)
                            {
                                r[x - 1, y] = counter + 1;
                            }
                            else if (r[x - 1, y] == -3)
                            {
                                x1 = x - 1;
                                y1 = y;
                                Build();
                                return;
                            }
                            if (r[x, y + 1] == -1)
                            {
                                r[x, y + 1] = counter + 1;
                            }
                            else if (r[x, y + 1] == -3)
                            {
                                x1 = x;
                                y1 = y + 1;
                                Build();
                                return;
                            }
                            if (r[x, y - 1] == -1)
                            {
                                r[x, y - 1] = counter + 1;
                            }
                            else if (r[x, y - 1] == -3)
                            {
                                x1 = x;
                                y1 = y - 1;
                                Build();
                                return;
                            }
                        }
                    }
                }

                if (counter > maxCounts - 1)
                {
                    Console.WriteLine(1024 > 1024);
                    Console.WriteLine(counter + " " + maxCounts);
                    Console.WriteLine("Маршрут не найден");
                    return;
                }
                counter++;
            }
        }
        static void Build()
        {
            while (true)
            {
                int min = int.MaxValue;
                if (min > r[x1 + 1, y1] && r[x1 + 1, y1] > 0)
                {
                    min = r[x1 + 1, y1];
                    x2 = x1 + 1;
                    y2 = y1;
                } else if (r[x1 + 1, y1] == 0)
                {
                    x2 = x1 + 1;
                    y2 = y1;
                }
                if (min > r[x1 - 1, y1] && r[x1 - 1, y1] > 0)
                {
                    min = r[x1 - 1, y1];
                    x2 = x1 - 1;
                    y2 = y1;
                }
                else if (r[x1 - 1, y1] == 0)
                {
                    x2 = x1 - 1;
                    y2 = y1;
                }
                if (min > r[x1, y1 + 1] && r[x1, y1 + 1] > 0)
                {
                    min = r[x1, y1 + 1];
                    x2 = x1;
                    y2 = y1 + 1;
                }
                else if (r[x1, y1 + 1] == 0)
                {
                    x2 = x1;
                    y2 = y1 + 1;
                }
                if (min > r[x1, y1 - 1] && r[x1, y1 - 1] > 0)
                {
                    min = r[x1, y1 - 1];
                    x2 = x1;
                    y2 = y1 - 1;
                }
                else if (r[x1, y1 - 1] == 0)
                {
                    x2 = x1;
                    y2 = y1 - 1;
                }
                x1 = x2;
                y1 = y2;

                if (r[x1, y1] == 0)
                {
                    Console.WriteLine("Маршрут найден");
                    for (int x = 0; x < r.GetLength(0); x++)
                    {
                        Console.WriteLine();
                        for (int y = 0; y < r.GetLength(1); y++)
                        {
                            if (r[x, y] == -2) Console.Write("#");
                            else if (r[x, y] == -4) Console.Write("+");
                            else if (r[x, y] == -3) Console.Write("F");
                            else if (r[x, y] == 0) Console.Write("S");
                            else Console.Write(" ");
                        }
                    }
                    break;
                }
                else
                {
                    r[x1, y1] = -4;
                }
            }
        }
        static void Main(string[] args)
        {
            Initialize();

            Console.Read();
        }
    }
}
